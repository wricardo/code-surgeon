// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/codesurgeon.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/wricardo/code-surgeon/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GptServiceName is the fully-qualified name of the GptService service.
	GptServiceName = "codesurgeon.GptService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GptServiceGetOpenAPIProcedure is the fully-qualified name of the GptService's GetOpenAPI RPC.
	GptServiceGetOpenAPIProcedure = "/codesurgeon.GptService/GetOpenAPI"
	// GptServiceSearchSimilarFunctionsProcedure is the fully-qualified name of the GptService's
	// SearchSimilarFunctions RPC.
	GptServiceSearchSimilarFunctionsProcedure = "/codesurgeon.GptService/SearchSimilarFunctions"
	// GptServiceGetNeo4JSchemaProcedure is the fully-qualified name of the GptService's GetNeo4jSchema
	// RPC.
	GptServiceGetNeo4JSchemaProcedure = "/codesurgeon.GptService/GetNeo4jSchema"
	// GptServiceExecuteNeo4JQueryProcedure is the fully-qualified name of the GptService's
	// ExecuteNeo4jQuery RPC.
	GptServiceExecuteNeo4JQueryProcedure = "/codesurgeon.GptService/ExecuteNeo4jQuery"
	// GptServiceThinkThroughProblemProcedure is the fully-qualified name of the GptService's
	// ThinkThroughProblem RPC.
	GptServiceThinkThroughProblemProcedure = "/codesurgeon.GptService/ThinkThroughProblem"
	// GptServiceAddKnowledgeProcedure is the fully-qualified name of the GptService's AddKnowledge RPC.
	GptServiceAddKnowledgeProcedure = "/codesurgeon.GptService/AddKnowledge"
	// GptServiceParseCodebaseProcedure is the fully-qualified name of the GptService's ParseCodebase
	// RPC.
	GptServiceParseCodebaseProcedure = "/codesurgeon.GptService/ParseCodebase"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gptServiceServiceDescriptor                      = api.File_api_codesurgeon_proto.Services().ByName("GptService")
	gptServiceGetOpenAPIMethodDescriptor             = gptServiceServiceDescriptor.Methods().ByName("GetOpenAPI")
	gptServiceSearchSimilarFunctionsMethodDescriptor = gptServiceServiceDescriptor.Methods().ByName("SearchSimilarFunctions")
	gptServiceGetNeo4JSchemaMethodDescriptor         = gptServiceServiceDescriptor.Methods().ByName("GetNeo4jSchema")
	gptServiceExecuteNeo4JQueryMethodDescriptor      = gptServiceServiceDescriptor.Methods().ByName("ExecuteNeo4jQuery")
	gptServiceThinkThroughProblemMethodDescriptor    = gptServiceServiceDescriptor.Methods().ByName("ThinkThroughProblem")
	gptServiceAddKnowledgeMethodDescriptor           = gptServiceServiceDescriptor.Methods().ByName("AddKnowledge")
	gptServiceParseCodebaseMethodDescriptor          = gptServiceServiceDescriptor.Methods().ByName("ParseCodebase")
)

// GptServiceClient is a client for the codesurgeon.GptService service.
type GptServiceClient interface {
	// GetOpenAPI retrieves the OpenAPI specification that can be used to on customGPT
	GetOpenAPI(context.Context, *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error)
	// SearchSimilarFunctions searches for similar functions based on an objective
	SearchSimilarFunctions(context.Context, *connect.Request[api.SearchSimilarFunctionsRequest]) (*connect.Response[api.SearchSimilarFunctionsResponse], error)
	// GetNeo4jSchema retrieves the schema of the Neo4j database
	GetNeo4JSchema(context.Context, *connect.Request[api.GetNeo4JSchemaRequest]) (*connect.Response[api.GetNeo4JSchemaResponse], error)
	// ExecuteNeo4jQuery executes a Neo4j query
	ExecuteNeo4JQuery(context.Context, *connect.Request[api.ExecuteNeo4JQueryRequest]) (*connect.Response[api.ExecuteNeo4JQueryResponse], error)
	// ThinkThroughProblem helps to think through a problem
	ThinkThroughProblem(context.Context, *connect.Request[api.ThinkThroughProblemRequest]) (*connect.Response[api.ThinkThroughProblemResponse], error)
	// AddKnowledge adds knowledge to the system
	AddKnowledge(context.Context, *connect.Request[api.AddKnowledgeRequest]) (*connect.Response[api.AddKnowledgeResponse], error)
	// ParseCodebase parses a file or directory
	ParseCodebase(context.Context, *connect.Request[api.ParseCodebaseRequest]) (*connect.Response[api.ParseCodebaseResponse], error)
}

// NewGptServiceClient constructs a client for the codesurgeon.GptService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGptServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GptServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gptServiceClient{
		getOpenAPI: connect.NewClient[api.GetOpenAPIRequest, api.GetOpenAPIResponse](
			httpClient,
			baseURL+GptServiceGetOpenAPIProcedure,
			connect.WithSchema(gptServiceGetOpenAPIMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchSimilarFunctions: connect.NewClient[api.SearchSimilarFunctionsRequest, api.SearchSimilarFunctionsResponse](
			httpClient,
			baseURL+GptServiceSearchSimilarFunctionsProcedure,
			connect.WithSchema(gptServiceSearchSimilarFunctionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNeo4JSchema: connect.NewClient[api.GetNeo4JSchemaRequest, api.GetNeo4JSchemaResponse](
			httpClient,
			baseURL+GptServiceGetNeo4JSchemaProcedure,
			connect.WithSchema(gptServiceGetNeo4JSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		executeNeo4JQuery: connect.NewClient[api.ExecuteNeo4JQueryRequest, api.ExecuteNeo4JQueryResponse](
			httpClient,
			baseURL+GptServiceExecuteNeo4JQueryProcedure,
			connect.WithSchema(gptServiceExecuteNeo4JQueryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		thinkThroughProblem: connect.NewClient[api.ThinkThroughProblemRequest, api.ThinkThroughProblemResponse](
			httpClient,
			baseURL+GptServiceThinkThroughProblemProcedure,
			connect.WithSchema(gptServiceThinkThroughProblemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addKnowledge: connect.NewClient[api.AddKnowledgeRequest, api.AddKnowledgeResponse](
			httpClient,
			baseURL+GptServiceAddKnowledgeProcedure,
			connect.WithSchema(gptServiceAddKnowledgeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		parseCodebase: connect.NewClient[api.ParseCodebaseRequest, api.ParseCodebaseResponse](
			httpClient,
			baseURL+GptServiceParseCodebaseProcedure,
			connect.WithSchema(gptServiceParseCodebaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gptServiceClient implements GptServiceClient.
type gptServiceClient struct {
	getOpenAPI             *connect.Client[api.GetOpenAPIRequest, api.GetOpenAPIResponse]
	searchSimilarFunctions *connect.Client[api.SearchSimilarFunctionsRequest, api.SearchSimilarFunctionsResponse]
	getNeo4JSchema         *connect.Client[api.GetNeo4JSchemaRequest, api.GetNeo4JSchemaResponse]
	executeNeo4JQuery      *connect.Client[api.ExecuteNeo4JQueryRequest, api.ExecuteNeo4JQueryResponse]
	thinkThroughProblem    *connect.Client[api.ThinkThroughProblemRequest, api.ThinkThroughProblemResponse]
	addKnowledge           *connect.Client[api.AddKnowledgeRequest, api.AddKnowledgeResponse]
	parseCodebase          *connect.Client[api.ParseCodebaseRequest, api.ParseCodebaseResponse]
}

// GetOpenAPI calls codesurgeon.GptService.GetOpenAPI.
func (c *gptServiceClient) GetOpenAPI(ctx context.Context, req *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error) {
	return c.getOpenAPI.CallUnary(ctx, req)
}

// SearchSimilarFunctions calls codesurgeon.GptService.SearchSimilarFunctions.
func (c *gptServiceClient) SearchSimilarFunctions(ctx context.Context, req *connect.Request[api.SearchSimilarFunctionsRequest]) (*connect.Response[api.SearchSimilarFunctionsResponse], error) {
	return c.searchSimilarFunctions.CallUnary(ctx, req)
}

// GetNeo4JSchema calls codesurgeon.GptService.GetNeo4jSchema.
func (c *gptServiceClient) GetNeo4JSchema(ctx context.Context, req *connect.Request[api.GetNeo4JSchemaRequest]) (*connect.Response[api.GetNeo4JSchemaResponse], error) {
	return c.getNeo4JSchema.CallUnary(ctx, req)
}

// ExecuteNeo4JQuery calls codesurgeon.GptService.ExecuteNeo4jQuery.
func (c *gptServiceClient) ExecuteNeo4JQuery(ctx context.Context, req *connect.Request[api.ExecuteNeo4JQueryRequest]) (*connect.Response[api.ExecuteNeo4JQueryResponse], error) {
	return c.executeNeo4JQuery.CallUnary(ctx, req)
}

// ThinkThroughProblem calls codesurgeon.GptService.ThinkThroughProblem.
func (c *gptServiceClient) ThinkThroughProblem(ctx context.Context, req *connect.Request[api.ThinkThroughProblemRequest]) (*connect.Response[api.ThinkThroughProblemResponse], error) {
	return c.thinkThroughProblem.CallUnary(ctx, req)
}

// AddKnowledge calls codesurgeon.GptService.AddKnowledge.
func (c *gptServiceClient) AddKnowledge(ctx context.Context, req *connect.Request[api.AddKnowledgeRequest]) (*connect.Response[api.AddKnowledgeResponse], error) {
	return c.addKnowledge.CallUnary(ctx, req)
}

// ParseCodebase calls codesurgeon.GptService.ParseCodebase.
func (c *gptServiceClient) ParseCodebase(ctx context.Context, req *connect.Request[api.ParseCodebaseRequest]) (*connect.Response[api.ParseCodebaseResponse], error) {
	return c.parseCodebase.CallUnary(ctx, req)
}

// GptServiceHandler is an implementation of the codesurgeon.GptService service.
type GptServiceHandler interface {
	// GetOpenAPI retrieves the OpenAPI specification that can be used to on customGPT
	GetOpenAPI(context.Context, *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error)
	// SearchSimilarFunctions searches for similar functions based on an objective
	SearchSimilarFunctions(context.Context, *connect.Request[api.SearchSimilarFunctionsRequest]) (*connect.Response[api.SearchSimilarFunctionsResponse], error)
	// GetNeo4jSchema retrieves the schema of the Neo4j database
	GetNeo4JSchema(context.Context, *connect.Request[api.GetNeo4JSchemaRequest]) (*connect.Response[api.GetNeo4JSchemaResponse], error)
	// ExecuteNeo4jQuery executes a Neo4j query
	ExecuteNeo4JQuery(context.Context, *connect.Request[api.ExecuteNeo4JQueryRequest]) (*connect.Response[api.ExecuteNeo4JQueryResponse], error)
	// ThinkThroughProblem helps to think through a problem
	ThinkThroughProblem(context.Context, *connect.Request[api.ThinkThroughProblemRequest]) (*connect.Response[api.ThinkThroughProblemResponse], error)
	// AddKnowledge adds knowledge to the system
	AddKnowledge(context.Context, *connect.Request[api.AddKnowledgeRequest]) (*connect.Response[api.AddKnowledgeResponse], error)
	// ParseCodebase parses a file or directory
	ParseCodebase(context.Context, *connect.Request[api.ParseCodebaseRequest]) (*connect.Response[api.ParseCodebaseResponse], error)
}

// NewGptServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGptServiceHandler(svc GptServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gptServiceGetOpenAPIHandler := connect.NewUnaryHandler(
		GptServiceGetOpenAPIProcedure,
		svc.GetOpenAPI,
		connect.WithSchema(gptServiceGetOpenAPIMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceSearchSimilarFunctionsHandler := connect.NewUnaryHandler(
		GptServiceSearchSimilarFunctionsProcedure,
		svc.SearchSimilarFunctions,
		connect.WithSchema(gptServiceSearchSimilarFunctionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceGetNeo4JSchemaHandler := connect.NewUnaryHandler(
		GptServiceGetNeo4JSchemaProcedure,
		svc.GetNeo4JSchema,
		connect.WithSchema(gptServiceGetNeo4JSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceExecuteNeo4JQueryHandler := connect.NewUnaryHandler(
		GptServiceExecuteNeo4JQueryProcedure,
		svc.ExecuteNeo4JQuery,
		connect.WithSchema(gptServiceExecuteNeo4JQueryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceThinkThroughProblemHandler := connect.NewUnaryHandler(
		GptServiceThinkThroughProblemProcedure,
		svc.ThinkThroughProblem,
		connect.WithSchema(gptServiceThinkThroughProblemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceAddKnowledgeHandler := connect.NewUnaryHandler(
		GptServiceAddKnowledgeProcedure,
		svc.AddKnowledge,
		connect.WithSchema(gptServiceAddKnowledgeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceParseCodebaseHandler := connect.NewUnaryHandler(
		GptServiceParseCodebaseProcedure,
		svc.ParseCodebase,
		connect.WithSchema(gptServiceParseCodebaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/codesurgeon.GptService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GptServiceGetOpenAPIProcedure:
			gptServiceGetOpenAPIHandler.ServeHTTP(w, r)
		case GptServiceSearchSimilarFunctionsProcedure:
			gptServiceSearchSimilarFunctionsHandler.ServeHTTP(w, r)
		case GptServiceGetNeo4JSchemaProcedure:
			gptServiceGetNeo4JSchemaHandler.ServeHTTP(w, r)
		case GptServiceExecuteNeo4JQueryProcedure:
			gptServiceExecuteNeo4JQueryHandler.ServeHTTP(w, r)
		case GptServiceThinkThroughProblemProcedure:
			gptServiceThinkThroughProblemHandler.ServeHTTP(w, r)
		case GptServiceAddKnowledgeProcedure:
			gptServiceAddKnowledgeHandler.ServeHTTP(w, r)
		case GptServiceParseCodebaseProcedure:
			gptServiceParseCodebaseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGptServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGptServiceHandler struct{}

func (UnimplementedGptServiceHandler) GetOpenAPI(context.Context, *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.GetOpenAPI is not implemented"))
}

func (UnimplementedGptServiceHandler) SearchSimilarFunctions(context.Context, *connect.Request[api.SearchSimilarFunctionsRequest]) (*connect.Response[api.SearchSimilarFunctionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.SearchSimilarFunctions is not implemented"))
}

func (UnimplementedGptServiceHandler) GetNeo4JSchema(context.Context, *connect.Request[api.GetNeo4JSchemaRequest]) (*connect.Response[api.GetNeo4JSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.GetNeo4jSchema is not implemented"))
}

func (UnimplementedGptServiceHandler) ExecuteNeo4JQuery(context.Context, *connect.Request[api.ExecuteNeo4JQueryRequest]) (*connect.Response[api.ExecuteNeo4JQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.ExecuteNeo4jQuery is not implemented"))
}

func (UnimplementedGptServiceHandler) ThinkThroughProblem(context.Context, *connect.Request[api.ThinkThroughProblemRequest]) (*connect.Response[api.ThinkThroughProblemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.ThinkThroughProblem is not implemented"))
}

func (UnimplementedGptServiceHandler) AddKnowledge(context.Context, *connect.Request[api.AddKnowledgeRequest]) (*connect.Response[api.AddKnowledgeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.AddKnowledge is not implemented"))
}

func (UnimplementedGptServiceHandler) ParseCodebase(context.Context, *connect.Request[api.ParseCodebaseRequest]) (*connect.Response[api.ParseCodebaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.ParseCodebase is not implemented"))
}
