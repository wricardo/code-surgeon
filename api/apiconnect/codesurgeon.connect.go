// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/codesurgeon.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/wricardo/code-surgeon/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GptServiceName is the fully-qualified name of the GptService service.
	GptServiceName = "codesurgeon.GptService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GptServiceGetOpenAPIProcedure is the fully-qualified name of the GptService's GetOpenAPI RPC.
	GptServiceGetOpenAPIProcedure = "/codesurgeon.GptService/GetOpenAPI"
	// GptServiceNewChatProcedure is the fully-qualified name of the GptService's NewChat RPC.
	GptServiceNewChatProcedure = "/codesurgeon.GptService/NewChat"
	// GptServiceGetChatProcedure is the fully-qualified name of the GptService's GetChat RPC.
	GptServiceGetChatProcedure = "/codesurgeon.GptService/GetChat"
	// GptServiceSendMessageProcedure is the fully-qualified name of the GptService's SendMessage RPC.
	GptServiceSendMessageProcedure = "/codesurgeon.GptService/SendMessage"
	// GptServiceReceiveSlackMessageProcedure is the fully-qualified name of the GptService's
	// ReceiveSlackMessage RPC.
	GptServiceReceiveSlackMessageProcedure = "/codesurgeon.GptService/ReceiveSlackMessage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gptServiceServiceDescriptor                   = api.File_api_codesurgeon_proto.Services().ByName("GptService")
	gptServiceGetOpenAPIMethodDescriptor          = gptServiceServiceDescriptor.Methods().ByName("GetOpenAPI")
	gptServiceNewChatMethodDescriptor             = gptServiceServiceDescriptor.Methods().ByName("NewChat")
	gptServiceGetChatMethodDescriptor             = gptServiceServiceDescriptor.Methods().ByName("GetChat")
	gptServiceSendMessageMethodDescriptor         = gptServiceServiceDescriptor.Methods().ByName("SendMessage")
	gptServiceReceiveSlackMessageMethodDescriptor = gptServiceServiceDescriptor.Methods().ByName("ReceiveSlackMessage")
)

// GptServiceClient is a client for the codesurgeon.GptService service.
type GptServiceClient interface {
	GetOpenAPI(context.Context, *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error)
	NewChat(context.Context, *connect.Request[api.NewChatRequest]) (*connect.Response[api.NewChatResponse], error)
	GetChat(context.Context, *connect.Request[api.GetChatRequest]) (*connect.Response[api.GetChatResponse], error)
	SendMessage(context.Context, *connect.Request[api.SendMessageRequest]) (*connect.Response[api.SendMessageResponse], error)
	ReceiveSlackMessage(context.Context, *connect.Request[api.ReceiveSlackMessageRequest]) (*connect.Response[api.ReceiveSlackMessageResponse], error)
}

// NewGptServiceClient constructs a client for the codesurgeon.GptService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGptServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GptServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gptServiceClient{
		getOpenAPI: connect.NewClient[api.GetOpenAPIRequest, api.GetOpenAPIResponse](
			httpClient,
			baseURL+GptServiceGetOpenAPIProcedure,
			connect.WithSchema(gptServiceGetOpenAPIMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		newChat: connect.NewClient[api.NewChatRequest, api.NewChatResponse](
			httpClient,
			baseURL+GptServiceNewChatProcedure,
			connect.WithSchema(gptServiceNewChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChat: connect.NewClient[api.GetChatRequest, api.GetChatResponse](
			httpClient,
			baseURL+GptServiceGetChatProcedure,
			connect.WithSchema(gptServiceGetChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[api.SendMessageRequest, api.SendMessageResponse](
			httpClient,
			baseURL+GptServiceSendMessageProcedure,
			connect.WithSchema(gptServiceSendMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		receiveSlackMessage: connect.NewClient[api.ReceiveSlackMessageRequest, api.ReceiveSlackMessageResponse](
			httpClient,
			baseURL+GptServiceReceiveSlackMessageProcedure,
			connect.WithSchema(gptServiceReceiveSlackMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gptServiceClient implements GptServiceClient.
type gptServiceClient struct {
	getOpenAPI          *connect.Client[api.GetOpenAPIRequest, api.GetOpenAPIResponse]
	newChat             *connect.Client[api.NewChatRequest, api.NewChatResponse]
	getChat             *connect.Client[api.GetChatRequest, api.GetChatResponse]
	sendMessage         *connect.Client[api.SendMessageRequest, api.SendMessageResponse]
	receiveSlackMessage *connect.Client[api.ReceiveSlackMessageRequest, api.ReceiveSlackMessageResponse]
}

// GetOpenAPI calls codesurgeon.GptService.GetOpenAPI.
func (c *gptServiceClient) GetOpenAPI(ctx context.Context, req *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error) {
	return c.getOpenAPI.CallUnary(ctx, req)
}

// NewChat calls codesurgeon.GptService.NewChat.
func (c *gptServiceClient) NewChat(ctx context.Context, req *connect.Request[api.NewChatRequest]) (*connect.Response[api.NewChatResponse], error) {
	return c.newChat.CallUnary(ctx, req)
}

// GetChat calls codesurgeon.GptService.GetChat.
func (c *gptServiceClient) GetChat(ctx context.Context, req *connect.Request[api.GetChatRequest]) (*connect.Response[api.GetChatResponse], error) {
	return c.getChat.CallUnary(ctx, req)
}

// SendMessage calls codesurgeon.GptService.SendMessage.
func (c *gptServiceClient) SendMessage(ctx context.Context, req *connect.Request[api.SendMessageRequest]) (*connect.Response[api.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// ReceiveSlackMessage calls codesurgeon.GptService.ReceiveSlackMessage.
func (c *gptServiceClient) ReceiveSlackMessage(ctx context.Context, req *connect.Request[api.ReceiveSlackMessageRequest]) (*connect.Response[api.ReceiveSlackMessageResponse], error) {
	return c.receiveSlackMessage.CallUnary(ctx, req)
}

// GptServiceHandler is an implementation of the codesurgeon.GptService service.
type GptServiceHandler interface {
	GetOpenAPI(context.Context, *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error)
	NewChat(context.Context, *connect.Request[api.NewChatRequest]) (*connect.Response[api.NewChatResponse], error)
	GetChat(context.Context, *connect.Request[api.GetChatRequest]) (*connect.Response[api.GetChatResponse], error)
	SendMessage(context.Context, *connect.Request[api.SendMessageRequest]) (*connect.Response[api.SendMessageResponse], error)
	ReceiveSlackMessage(context.Context, *connect.Request[api.ReceiveSlackMessageRequest]) (*connect.Response[api.ReceiveSlackMessageResponse], error)
}

// NewGptServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGptServiceHandler(svc GptServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gptServiceGetOpenAPIHandler := connect.NewUnaryHandler(
		GptServiceGetOpenAPIProcedure,
		svc.GetOpenAPI,
		connect.WithSchema(gptServiceGetOpenAPIMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceNewChatHandler := connect.NewUnaryHandler(
		GptServiceNewChatProcedure,
		svc.NewChat,
		connect.WithSchema(gptServiceNewChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceGetChatHandler := connect.NewUnaryHandler(
		GptServiceGetChatProcedure,
		svc.GetChat,
		connect.WithSchema(gptServiceGetChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceSendMessageHandler := connect.NewUnaryHandler(
		GptServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(gptServiceSendMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gptServiceReceiveSlackMessageHandler := connect.NewUnaryHandler(
		GptServiceReceiveSlackMessageProcedure,
		svc.ReceiveSlackMessage,
		connect.WithSchema(gptServiceReceiveSlackMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/codesurgeon.GptService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GptServiceGetOpenAPIProcedure:
			gptServiceGetOpenAPIHandler.ServeHTTP(w, r)
		case GptServiceNewChatProcedure:
			gptServiceNewChatHandler.ServeHTTP(w, r)
		case GptServiceGetChatProcedure:
			gptServiceGetChatHandler.ServeHTTP(w, r)
		case GptServiceSendMessageProcedure:
			gptServiceSendMessageHandler.ServeHTTP(w, r)
		case GptServiceReceiveSlackMessageProcedure:
			gptServiceReceiveSlackMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGptServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGptServiceHandler struct{}

func (UnimplementedGptServiceHandler) GetOpenAPI(context.Context, *connect.Request[api.GetOpenAPIRequest]) (*connect.Response[api.GetOpenAPIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.GetOpenAPI is not implemented"))
}

func (UnimplementedGptServiceHandler) NewChat(context.Context, *connect.Request[api.NewChatRequest]) (*connect.Response[api.NewChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.NewChat is not implemented"))
}

func (UnimplementedGptServiceHandler) GetChat(context.Context, *connect.Request[api.GetChatRequest]) (*connect.Response[api.GetChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.GetChat is not implemented"))
}

func (UnimplementedGptServiceHandler) SendMessage(context.Context, *connect.Request[api.SendMessageRequest]) (*connect.Response[api.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.SendMessage is not implemented"))
}

func (UnimplementedGptServiceHandler) ReceiveSlackMessage(context.Context, *connect.Request[api.ReceiveSlackMessageRequest]) (*connect.Response[api.ReceiveSlackMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("codesurgeon.GptService.ReceiveSlackMessage is not implemented"))
}
