// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/codesurgeon.proto

package api

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for ParseCodebase
type ParseCodebaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                    string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Recursive               bool     `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
	Format                  string   `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	PlainStructs            bool     `protobuf:"varint,4,opt,name=plain_structs,json=plainStructs,proto3" json:"plain_structs,omitempty"`
	FieldsPlainStructs      bool     `protobuf:"varint,5,opt,name=fields_plain_structs,json=fieldsPlainStructs,proto3" json:"fields_plain_structs,omitempty"`
	StructsWithMethod       bool     `protobuf:"varint,6,opt,name=structs_with_method,json=structsWithMethod,proto3" json:"structs_with_method,omitempty"`
	FieldsStructsWithMethod bool     `protobuf:"varint,7,opt,name=fields_structs_with_method,json=fieldsStructsWithMethod,proto3" json:"fields_structs_with_method,omitempty"`
	Methods                 bool     `protobuf:"varint,8,opt,name=methods,proto3" json:"methods,omitempty"`
	Functions               bool     `protobuf:"varint,9,opt,name=functions,proto3" json:"functions,omitempty"`
	Comments                bool     `protobuf:"varint,10,opt,name=comments,proto3" json:"comments,omitempty"`
	Tags                    bool     `protobuf:"varint,11,opt,name=tags,proto3" json:"tags,omitempty"`
	IgnoreRule              []string `protobuf:"bytes,12,rep,name=ignore_rule,json=ignoreRule,proto3" json:"ignore_rule,omitempty"`
}

func (x *ParseCodebaseRequest) Reset() {
	*x = ParseCodebaseRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseCodebaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseCodebaseRequest) ProtoMessage() {}

func (x *ParseCodebaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseCodebaseRequest.ProtoReflect.Descriptor instead.
func (*ParseCodebaseRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{0}
}

func (x *ParseCodebaseRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParseCodebaseRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *ParseCodebaseRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ParseCodebaseRequest) GetPlainStructs() bool {
	if x != nil {
		return x.PlainStructs
	}
	return false
}

func (x *ParseCodebaseRequest) GetFieldsPlainStructs() bool {
	if x != nil {
		return x.FieldsPlainStructs
	}
	return false
}

func (x *ParseCodebaseRequest) GetStructsWithMethod() bool {
	if x != nil {
		return x.StructsWithMethod
	}
	return false
}

func (x *ParseCodebaseRequest) GetFieldsStructsWithMethod() bool {
	if x != nil {
		return x.FieldsStructsWithMethod
	}
	return false
}

func (x *ParseCodebaseRequest) GetMethods() bool {
	if x != nil {
		return x.Methods
	}
	return false
}

func (x *ParseCodebaseRequest) GetFunctions() bool {
	if x != nil {
		return x.Functions
	}
	return false
}

func (x *ParseCodebaseRequest) GetComments() bool {
	if x != nil {
		return x.Comments
	}
	return false
}

func (x *ParseCodebaseRequest) GetTags() bool {
	if x != nil {
		return x.Tags
	}
	return false
}

func (x *ParseCodebaseRequest) GetIgnoreRule() []string {
	if x != nil {
		return x.IgnoreRule
	}
	return nil
}

// Response message for ParseCodebase
type ParseCodebaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParsedInfo string `protobuf:"bytes,1,opt,name=parsed_info,json=parsedInfo,proto3" json:"parsed_info,omitempty"` // This can be adjusted based on the actual structure of parsed data
}

func (x *ParseCodebaseResponse) Reset() {
	*x = ParseCodebaseResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseCodebaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseCodebaseResponse) ProtoMessage() {}

func (x *ParseCodebaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseCodebaseResponse.ProtoReflect.Descriptor instead.
func (*ParseCodebaseResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{1}
}

func (x *ParseCodebaseResponse) GetParsedInfo() string {
	if x != nil {
		return x.ParsedInfo
	}
	return ""
}

type GetChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *GetChatRequest) Reset() {
	*x = GetChatRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRequest) ProtoMessage() {}

func (x *GetChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRequest.ProtoReflect.Descriptor instead.
func (*GetChatRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

type GetChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat *Chat `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
}

func (x *GetChatResponse) Reset() {
	*x = GetChatResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatResponse) ProtoMessage() {}

func (x *GetChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatResponse.ProtoReflect.Descriptor instead.
func (*GetChatResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{3}
}

func (x *GetChatResponse) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

type NewChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *NewChatRequest) Reset() {
	*x = NewChatRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChatRequest) ProtoMessage() {}

func (x *NewChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChatRequest.ProtoReflect.Descriptor instead.
func (*NewChatRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{4}
}

func (x *NewChatRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type NewChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat *Chat `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
}

func (x *NewChatResponse) Reset() {
	*x = NewChatResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChatResponse) ProtoMessage() {}

func (x *NewChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChatResponse.ProtoReflect.Descriptor instead.
func (*NewChatResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{5}
}

func (x *NewChatResponse) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

type Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrentMode *Mode        `protobuf:"bytes,2,opt,name=current_mode,json=currentMode,proto3" json:"current_mode,omitempty"`
	ModeState   []*ModeState `protobuf:"bytes,3,rep,name=mode_state,json=modeState,proto3" json:"mode_state,omitempty"`
	Messages    []*Message   `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *Chat) Reset() {
	*x = Chat{}
	mi := &file_api_codesurgeon_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{6}
}

func (x *Chat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chat) GetCurrentMode() *Mode {
	if x != nil {
		return x.CurrentMode
	}
	return nil
}

func (x *Chat) GetModeState() []*ModeState {
	if x != nil {
		return x.ModeState
	}
	return nil
}

func (x *Chat) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ModeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ModeState) Reset() {
	*x = ModeState{}
	mi := &file_api_codesurgeon_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeState) ProtoMessage() {}

func (x *ModeState) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeState.ProtoReflect.Descriptor instead.
func (*ModeState) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{7}
}

func (x *ModeState) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

func (x *ModeState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ModeState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  string   `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{8}
}

func (x *SendMessageRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *SendMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  string   `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Command *Command `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Message *Message `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Mode    *Mode    `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"` // mode if any
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{9}
}

func (x *SendMessageResponse) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *SendMessageResponse) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *SendMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SendMessageResponse) GetMode() *Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Mode) Reset() {
	*x = Mode{}
	mi := &file_api_codesurgeon_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mode) ProtoMessage() {}

func (x *Mode) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mode.ProtoReflect.Descriptor instead.
func (*Mode) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{10}
}

func (x *Mode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_api_codesurgeon_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{11}
}

func (x *Command) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text   string       `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Form   *FormMessage `protobuf:"bytes,3,opt,name=form,proto3" json:"form,omitempty"`
	Sender string       `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"` // user or ai or mode
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_api_codesurgeon_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{12}
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetForm() *FormMessage {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *Message) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

type FormMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*QuestionAnswer `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *FormMessage) Reset() {
	*x = FormMessage{}
	mi := &file_api_codesurgeon_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormMessage) ProtoMessage() {}

func (x *FormMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormMessage.ProtoReflect.Descriptor instead.
func (*FormMessage) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{13}
}

func (x *FormMessage) GetQuestions() []*QuestionAnswer {
	if x != nil {
		return x.Questions
	}
	return nil
}

type QuestionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question string `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Answer   string `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *QuestionAnswer) Reset() {
	*x = QuestionAnswer{}
	mi := &file_api_codesurgeon_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnswer) ProtoMessage() {}

func (x *QuestionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnswer.ProtoReflect.Descriptor instead.
func (*QuestionAnswer) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{14}
}

func (x *QuestionAnswer) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type GetOpenAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOpenAPIRequest) Reset() {
	*x = GetOpenAPIRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOpenAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenAPIRequest) ProtoMessage() {}

func (x *GetOpenAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenAPIRequest.ProtoReflect.Descriptor instead.
func (*GetOpenAPIRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{15}
}

type GetOpenAPIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openapi string `protobuf:"bytes,1,opt,name=openapi,proto3" json:"openapi,omitempty"`
}

func (x *GetOpenAPIResponse) Reset() {
	*x = GetOpenAPIResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOpenAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenAPIResponse) ProtoMessage() {}

func (x *GetOpenAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenAPIResponse.ProtoReflect.Descriptor instead.
func (*GetOpenAPIResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{16}
}

func (x *GetOpenAPIResponse) GetOpenapi() string {
	if x != nil {
		return x.Openapi
	}
	return ""
}

type ReceiveSlackMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Challenge string `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ReceiveSlackMessageRequest) Reset() {
	*x = ReceiveSlackMessageRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveSlackMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSlackMessageRequest) ProtoMessage() {}

func (x *ReceiveSlackMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSlackMessageRequest.ProtoReflect.Descriptor instead.
func (*ReceiveSlackMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{17}
}

func (x *ReceiveSlackMessageRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReceiveSlackMessageRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *ReceiveSlackMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ReceiveSlackMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge string `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *ReceiveSlackMessageResponse) Reset() {
	*x = ReceiveSlackMessageResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveSlackMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSlackMessageResponse) ProtoMessage() {}

func (x *ReceiveSlackMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSlackMessageResponse.ProtoReflect.Descriptor instead.
func (*ReceiveSlackMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{18}
}

func (x *ReceiveSlackMessageResponse) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

type SearchSimilarFunctionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objective string `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
}

func (x *SearchSimilarFunctionsRequest) Reset() {
	*x = SearchSimilarFunctionsRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSimilarFunctionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSimilarFunctionsRequest) ProtoMessage() {}

func (x *SearchSimilarFunctionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSimilarFunctionsRequest.ProtoReflect.Descriptor instead.
func (*SearchSimilarFunctionsRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{19}
}

func (x *SearchSimilarFunctionsRequest) GetObjective() string {
	if x != nil {
		return x.Objective
	}
	return ""
}

type SearchSimilarFunctionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Functions []*SearchSimilarFunctionsResponse_Function `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty"`
}

func (x *SearchSimilarFunctionsResponse) Reset() {
	*x = SearchSimilarFunctionsResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSimilarFunctionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSimilarFunctionsResponse) ProtoMessage() {}

func (x *SearchSimilarFunctionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSimilarFunctionsResponse.ProtoReflect.Descriptor instead.
func (*SearchSimilarFunctionsResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{20}
}

func (x *SearchSimilarFunctionsResponse) GetFunctions() []*SearchSimilarFunctionsResponse_Function {
	if x != nil {
		return x.Functions
	}
	return nil
}

type GetNeo4JSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNeo4JSchemaRequest) Reset() {
	*x = GetNeo4JSchemaRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNeo4JSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNeo4JSchemaRequest) ProtoMessage() {}

func (x *GetNeo4JSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNeo4JSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetNeo4JSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{21}
}

type GetNeo4JSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *Schema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GetNeo4JSchemaResponse) Reset() {
	*x = GetNeo4JSchemaResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNeo4JSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNeo4JSchemaResponse) ProtoMessage() {}

func (x *GetNeo4JSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNeo4JSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetNeo4JSchemaResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{22}
}

func (x *GetNeo4JSchemaResponse) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// Schema for Neo4j database
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels        []*LabelSchema        `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Relationships []*RelationshipSchema `protobuf:"bytes,2,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_api_codesurgeon_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{23}
}

func (x *Schema) GetLabels() []*LabelSchema {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Schema) GetRelationships() []*RelationshipSchema {
	if x != nil {
		return x.Relationships
	}
	return nil
}

// LabelSchema represents a node label in Neo4j
type LabelSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label      string            `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Properties []*PropertySchema `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *LabelSchema) Reset() {
	*x = LabelSchema{}
	mi := &file_api_codesurgeon_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSchema) ProtoMessage() {}

func (x *LabelSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSchema.ProtoReflect.Descriptor instead.
func (*LabelSchema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{24}
}

func (x *LabelSchema) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LabelSchema) GetProperties() []*PropertySchema {
	if x != nil {
		return x.Properties
	}
	return nil
}

// PropertySchema represents a property of a node in Neo4j
type PropertySchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property            string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Type                string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsIndexed           bool   `protobuf:"varint,3,opt,name=isIndexed,proto3" json:"isIndexed,omitempty"`
	UniqueConstraint    bool   `protobuf:"varint,4,opt,name=uniqueConstraint,proto3" json:"uniqueConstraint,omitempty"`
	ExistenceConstraint bool   `protobuf:"varint,5,opt,name=existenceConstraint,proto3" json:"existenceConstraint,omitempty"`
}

func (x *PropertySchema) Reset() {
	*x = PropertySchema{}
	mi := &file_api_codesurgeon_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertySchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertySchema) ProtoMessage() {}

func (x *PropertySchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertySchema.ProtoReflect.Descriptor instead.
func (*PropertySchema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{25}
}

func (x *PropertySchema) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertySchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PropertySchema) GetIsIndexed() bool {
	if x != nil {
		return x.IsIndexed
	}
	return false
}

func (x *PropertySchema) GetUniqueConstraint() bool {
	if x != nil {
		return x.UniqueConstraint
	}
	return false
}

func (x *PropertySchema) GetExistenceConstraint() bool {
	if x != nil {
		return x.ExistenceConstraint
	}
	return false
}

// RelationshipSchema represents a relationship in Neo4j
type RelationshipSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationship string `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
	FromLabel    string `protobuf:"bytes,2,opt,name=fromLabel,proto3" json:"fromLabel,omitempty"`
	ToLabel      string `protobuf:"bytes,3,opt,name=toLabel,proto3" json:"toLabel,omitempty"`
}

func (x *RelationshipSchema) Reset() {
	*x = RelationshipSchema{}
	mi := &file_api_codesurgeon_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationshipSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipSchema) ProtoMessage() {}

func (x *RelationshipSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationshipSchema.ProtoReflect.Descriptor instead.
func (*RelationshipSchema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{26}
}

func (x *RelationshipSchema) GetRelationship() string {
	if x != nil {
		return x.Relationship
	}
	return ""
}

func (x *RelationshipSchema) GetFromLabel() string {
	if x != nil {
		return x.FromLabel
	}
	return ""
}

func (x *RelationshipSchema) GetToLabel() string {
	if x != nil {
		return x.ToLabel
	}
	return ""
}

// Request to think through a problem
type ThinkThroughProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goal             string   `protobuf:"bytes,1,opt,name=goal,proto3" json:"goal,omitempty"`
	Context          string   `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	ProblemStatement string   `protobuf:"bytes,3,opt,name=problem_statement,json=problemStatement,proto3" json:"problem_statement,omitempty"`
	Questions        []string `protobuf:"bytes,4,rep,name=questions,proto3" json:"questions,omitempty"`
	QuestionsString  string   `protobuf:"bytes,5,opt,name=questions_string,json=questionsString,proto3" json:"questions_string,omitempty"` // multiple questions in one block, to be parsed with llm
}

func (x *ThinkThroughProblemRequest) Reset() {
	*x = ThinkThroughProblemRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThinkThroughProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkThroughProblemRequest) ProtoMessage() {}

func (x *ThinkThroughProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkThroughProblemRequest.ProtoReflect.Descriptor instead.
func (*ThinkThroughProblemRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{27}
}

func (x *ThinkThroughProblemRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *ThinkThroughProblemRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ThinkThroughProblemRequest) GetProblemStatement() string {
	if x != nil {
		return x.ProblemStatement
	}
	return ""
}

func (x *ThinkThroughProblemRequest) GetQuestions() []string {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ThinkThroughProblemRequest) GetQuestionsString() string {
	if x != nil {
		return x.QuestionsString
	}
	return ""
}

// Response from thinking through a problem
type ThinkThroughProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers          []*QuestionAnswer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	Observations     string            `protobuf:"bytes,2,opt,name=observations,proto3" json:"observations,omitempty"`
	SimilarQuestions []*QuestionAnswer `protobuf:"bytes,3,rep,name=similar_questions,json=similarQuestions,proto3" json:"similar_questions,omitempty"`
}

func (x *ThinkThroughProblemResponse) Reset() {
	*x = ThinkThroughProblemResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThinkThroughProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkThroughProblemResponse) ProtoMessage() {}

func (x *ThinkThroughProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkThroughProblemResponse.ProtoReflect.Descriptor instead.
func (*ThinkThroughProblemResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{28}
}

func (x *ThinkThroughProblemResponse) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *ThinkThroughProblemResponse) GetObservations() string {
	if x != nil {
		return x.Observations
	}
	return ""
}

func (x *ThinkThroughProblemResponse) GetSimilarQuestions() []*QuestionAnswer {
	if x != nil {
		return x.SimilarQuestions
	}
	return nil
}

// Request to add knowledge to the system
type AddKnowledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionAnswer []*QuestionAnswer `protobuf:"bytes,1,rep,name=question_answer,json=questionAnswer,proto3" json:"question_answer,omitempty"`
}

func (x *AddKnowledgeRequest) Reset() {
	*x = AddKnowledgeRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKnowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKnowledgeRequest) ProtoMessage() {}

func (x *AddKnowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKnowledgeRequest.ProtoReflect.Descriptor instead.
func (*AddKnowledgeRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{29}
}

func (x *AddKnowledgeRequest) GetQuestionAnswer() []*QuestionAnswer {
	if x != nil {
		return x.QuestionAnswer
	}
	return nil
}

// Response after adding knowledge
type AddKnowledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddKnowledgeResponse) Reset() {
	*x = AddKnowledgeResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKnowledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKnowledgeResponse) ProtoMessage() {}

func (x *AddKnowledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKnowledgeResponse.ProtoReflect.Descriptor instead.
func (*AddKnowledgeResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{30}
}

// Request to execute a Neo4j query
type ExecuteNeo4JQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ExecuteNeo4JQueryRequest) Reset() {
	*x = ExecuteNeo4JQueryRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteNeo4JQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNeo4JQueryRequest) ProtoMessage() {}

func (x *ExecuteNeo4JQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNeo4JQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteNeo4JQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{31}
}

func (x *ExecuteNeo4JQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Response from executing a Neo4j query
type ExecuteNeo4JQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecuteNeo4JQueryResponse) Reset() {
	*x = ExecuteNeo4JQueryResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteNeo4JQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNeo4JQueryResponse) ProtoMessage() {}

func (x *ExecuteNeo4JQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNeo4JQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteNeo4JQueryResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{32}
}

func (x *ExecuteNeo4JQueryResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type SearchSimilarFunctionsResponse_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SearchSimilarFunctionsResponse_Function) Reset() {
	*x = SearchSimilarFunctionsResponse_Function{}
	mi := &file_api_codesurgeon_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSimilarFunctionsResponse_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSimilarFunctionsResponse_Function) ProtoMessage() {}

func (x *SearchSimilarFunctionsResponse_Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSimilarFunctionsResponse_Function.ProtoReflect.Descriptor instead.
func (*SearchSimilarFunctionsResponse_Function) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{20, 0}
}

func (x *SearchSimilarFunctionsResponse_Function) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

var File_api_codesurgeon_proto protoreflect.FileDescriptor

var file_api_codesurgeon_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72,
	0x67, 0x65, 0x6f, 0x6e, 0x22, 0xad, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3b,
	0x0a, 0x1a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63,
	0x68, 0x61, 0x74, 0x22, 0x31, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75,
	0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x22, 0xb5, 0x01, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x1a, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x22, 0x48, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f,
	0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x22, 0x64, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x1b,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x1d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x1e, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x6f, 0x34, 0x6a, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x6f, 0x34, 0x6a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22,
	0x81, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x54, 0x68, 0x69, 0x6e, 0x6b,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x1b, 0x54, 0x68,
	0x69, 0x6e, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x10, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65,
	0x6f, 0x34, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x4e, 0x65, 0x6f, 0x34, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xec, 0x07, 0x0a, 0x0a, 0x47,
	0x70, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x4e, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75,
	0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67,
	0x65, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75,
	0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x12,
	0x1e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x71, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72,
	0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x6f, 0x34, 0x6a, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67,
	0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x6f, 0x34, 0x6a, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x6f, 0x34, 0x6a,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x6f, 0x34, 0x6a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f,
	0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x6f, 0x34, 0x6a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x4e, 0x65, 0x6f, 0x34, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x54, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e,
	0x2e, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67,
	0x65, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x95, 0x01, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x10, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x72,
	0x69, 0x63, 0x61, 0x72, 0x64, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x75, 0x72, 0x67,
	0x65, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0b,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0xca, 0x02, 0x0b, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0xe2, 0x02, 0x17, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x75, 0x72, 0x67, 0x65, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x75, 0x72, 0x67, 0x65, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_codesurgeon_proto_rawDescOnce sync.Once
	file_api_codesurgeon_proto_rawDescData = file_api_codesurgeon_proto_rawDesc
)

func file_api_codesurgeon_proto_rawDescGZIP() []byte {
	file_api_codesurgeon_proto_rawDescOnce.Do(func() {
		file_api_codesurgeon_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_codesurgeon_proto_rawDescData)
	})
	return file_api_codesurgeon_proto_rawDescData
}

var file_api_codesurgeon_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_api_codesurgeon_proto_goTypes = []any{
	(*ParseCodebaseRequest)(nil),                    // 0: codesurgeon.ParseCodebaseRequest
	(*ParseCodebaseResponse)(nil),                   // 1: codesurgeon.ParseCodebaseResponse
	(*GetChatRequest)(nil),                          // 2: codesurgeon.GetChatRequest
	(*GetChatResponse)(nil),                         // 3: codesurgeon.GetChatResponse
	(*NewChatRequest)(nil),                          // 4: codesurgeon.NewChatRequest
	(*NewChatResponse)(nil),                         // 5: codesurgeon.NewChatResponse
	(*Chat)(nil),                                    // 6: codesurgeon.Chat
	(*ModeState)(nil),                               // 7: codesurgeon.ModeState
	(*SendMessageRequest)(nil),                      // 8: codesurgeon.SendMessageRequest
	(*SendMessageResponse)(nil),                     // 9: codesurgeon.SendMessageResponse
	(*Mode)(nil),                                    // 10: codesurgeon.Mode
	(*Command)(nil),                                 // 11: codesurgeon.Command
	(*Message)(nil),                                 // 12: codesurgeon.Message
	(*FormMessage)(nil),                             // 13: codesurgeon.FormMessage
	(*QuestionAnswer)(nil),                          // 14: codesurgeon.QuestionAnswer
	(*GetOpenAPIRequest)(nil),                       // 15: codesurgeon.GetOpenAPIRequest
	(*GetOpenAPIResponse)(nil),                      // 16: codesurgeon.GetOpenAPIResponse
	(*ReceiveSlackMessageRequest)(nil),              // 17: codesurgeon.ReceiveSlackMessageRequest
	(*ReceiveSlackMessageResponse)(nil),             // 18: codesurgeon.ReceiveSlackMessageResponse
	(*SearchSimilarFunctionsRequest)(nil),           // 19: codesurgeon.SearchSimilarFunctionsRequest
	(*SearchSimilarFunctionsResponse)(nil),          // 20: codesurgeon.SearchSimilarFunctionsResponse
	(*GetNeo4JSchemaRequest)(nil),                   // 21: codesurgeon.GetNeo4jSchemaRequest
	(*GetNeo4JSchemaResponse)(nil),                  // 22: codesurgeon.GetNeo4jSchemaResponse
	(*Schema)(nil),                                  // 23: codesurgeon.Schema
	(*LabelSchema)(nil),                             // 24: codesurgeon.LabelSchema
	(*PropertySchema)(nil),                          // 25: codesurgeon.PropertySchema
	(*RelationshipSchema)(nil),                      // 26: codesurgeon.RelationshipSchema
	(*ThinkThroughProblemRequest)(nil),              // 27: codesurgeon.ThinkThroughProblemRequest
	(*ThinkThroughProblemResponse)(nil),             // 28: codesurgeon.ThinkThroughProblemResponse
	(*AddKnowledgeRequest)(nil),                     // 29: codesurgeon.AddKnowledgeRequest
	(*AddKnowledgeResponse)(nil),                    // 30: codesurgeon.AddKnowledgeResponse
	(*ExecuteNeo4JQueryRequest)(nil),                // 31: codesurgeon.ExecuteNeo4jQueryRequest
	(*ExecuteNeo4JQueryResponse)(nil),               // 32: codesurgeon.ExecuteNeo4jQueryResponse
	(*SearchSimilarFunctionsResponse_Function)(nil), // 33: codesurgeon.SearchSimilarFunctionsResponse.Function
}
var file_api_codesurgeon_proto_depIdxs = []int32{
	6,  // 0: codesurgeon.GetChatResponse.chat:type_name -> codesurgeon.Chat
	6,  // 1: codesurgeon.NewChatResponse.chat:type_name -> codesurgeon.Chat
	10, // 2: codesurgeon.Chat.current_mode:type_name -> codesurgeon.Mode
	7,  // 3: codesurgeon.Chat.mode_state:type_name -> codesurgeon.ModeState
	12, // 4: codesurgeon.Chat.messages:type_name -> codesurgeon.Message
	12, // 5: codesurgeon.SendMessageRequest.message:type_name -> codesurgeon.Message
	11, // 6: codesurgeon.SendMessageResponse.command:type_name -> codesurgeon.Command
	12, // 7: codesurgeon.SendMessageResponse.message:type_name -> codesurgeon.Message
	10, // 8: codesurgeon.SendMessageResponse.mode:type_name -> codesurgeon.Mode
	13, // 9: codesurgeon.Message.form:type_name -> codesurgeon.FormMessage
	14, // 10: codesurgeon.FormMessage.questions:type_name -> codesurgeon.QuestionAnswer
	33, // 11: codesurgeon.SearchSimilarFunctionsResponse.functions:type_name -> codesurgeon.SearchSimilarFunctionsResponse.Function
	23, // 12: codesurgeon.GetNeo4jSchemaResponse.schema:type_name -> codesurgeon.Schema
	24, // 13: codesurgeon.Schema.labels:type_name -> codesurgeon.LabelSchema
	26, // 14: codesurgeon.Schema.relationships:type_name -> codesurgeon.RelationshipSchema
	25, // 15: codesurgeon.LabelSchema.properties:type_name -> codesurgeon.PropertySchema
	14, // 16: codesurgeon.ThinkThroughProblemResponse.answers:type_name -> codesurgeon.QuestionAnswer
	14, // 17: codesurgeon.ThinkThroughProblemResponse.similar_questions:type_name -> codesurgeon.QuestionAnswer
	14, // 18: codesurgeon.AddKnowledgeRequest.question_answer:type_name -> codesurgeon.QuestionAnswer
	4,  // 19: codesurgeon.GptService.NewChat:input_type -> codesurgeon.NewChatRequest
	2,  // 20: codesurgeon.GptService.GetChat:input_type -> codesurgeon.GetChatRequest
	8,  // 21: codesurgeon.GptService.SendMessage:input_type -> codesurgeon.SendMessageRequest
	17, // 22: codesurgeon.GptService.ReceiveSlackMessage:input_type -> codesurgeon.ReceiveSlackMessageRequest
	15, // 23: codesurgeon.GptService.GetOpenAPI:input_type -> codesurgeon.GetOpenAPIRequest
	19, // 24: codesurgeon.GptService.SearchSimilarFunctions:input_type -> codesurgeon.SearchSimilarFunctionsRequest
	21, // 25: codesurgeon.GptService.GetNeo4jSchema:input_type -> codesurgeon.GetNeo4jSchemaRequest
	31, // 26: codesurgeon.GptService.ExecuteNeo4jQuery:input_type -> codesurgeon.ExecuteNeo4jQueryRequest
	27, // 27: codesurgeon.GptService.ThinkThroughProblem:input_type -> codesurgeon.ThinkThroughProblemRequest
	29, // 28: codesurgeon.GptService.AddKnowledge:input_type -> codesurgeon.AddKnowledgeRequest
	0,  // 29: codesurgeon.GptService.ParseCodebase:input_type -> codesurgeon.ParseCodebaseRequest
	5,  // 30: codesurgeon.GptService.NewChat:output_type -> codesurgeon.NewChatResponse
	3,  // 31: codesurgeon.GptService.GetChat:output_type -> codesurgeon.GetChatResponse
	9,  // 32: codesurgeon.GptService.SendMessage:output_type -> codesurgeon.SendMessageResponse
	18, // 33: codesurgeon.GptService.ReceiveSlackMessage:output_type -> codesurgeon.ReceiveSlackMessageResponse
	16, // 34: codesurgeon.GptService.GetOpenAPI:output_type -> codesurgeon.GetOpenAPIResponse
	20, // 35: codesurgeon.GptService.SearchSimilarFunctions:output_type -> codesurgeon.SearchSimilarFunctionsResponse
	22, // 36: codesurgeon.GptService.GetNeo4jSchema:output_type -> codesurgeon.GetNeo4jSchemaResponse
	32, // 37: codesurgeon.GptService.ExecuteNeo4jQuery:output_type -> codesurgeon.ExecuteNeo4jQueryResponse
	28, // 38: codesurgeon.GptService.ThinkThroughProblem:output_type -> codesurgeon.ThinkThroughProblemResponse
	30, // 39: codesurgeon.GptService.AddKnowledge:output_type -> codesurgeon.AddKnowledgeResponse
	1,  // 40: codesurgeon.GptService.ParseCodebase:output_type -> codesurgeon.ParseCodebaseResponse
	30, // [30:41] is the sub-list for method output_type
	19, // [19:30] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_api_codesurgeon_proto_init() }
func file_api_codesurgeon_proto_init() {
	if File_api_codesurgeon_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_codesurgeon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_codesurgeon_proto_goTypes,
		DependencyIndexes: file_api_codesurgeon_proto_depIdxs,
		MessageInfos:      file_api_codesurgeon_proto_msgTypes,
	}.Build()
	File_api_codesurgeon_proto = out.File
	file_api_codesurgeon_proto_rawDesc = nil
	file_api_codesurgeon_proto_goTypes = nil
	file_api_codesurgeon_proto_depIdxs = nil
}
