// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/codesurgeon.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for ParseCodebase
type ParseCodebaseRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Path                    string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Recursive               bool                   `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
	Format                  string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	PlainStructs            bool                   `protobuf:"varint,4,opt,name=plain_structs,json=plainStructs,proto3" json:"plain_structs,omitempty"`
	FieldsPlainStructs      bool                   `protobuf:"varint,5,opt,name=fields_plain_structs,json=fieldsPlainStructs,proto3" json:"fields_plain_structs,omitempty"`
	StructsWithMethod       bool                   `protobuf:"varint,6,opt,name=structs_with_method,json=structsWithMethod,proto3" json:"structs_with_method,omitempty"`
	FieldsStructsWithMethod bool                   `protobuf:"varint,7,opt,name=fields_structs_with_method,json=fieldsStructsWithMethod,proto3" json:"fields_structs_with_method,omitempty"`
	Methods                 bool                   `protobuf:"varint,8,opt,name=methods,proto3" json:"methods,omitempty"`
	Functions               bool                   `protobuf:"varint,9,opt,name=functions,proto3" json:"functions,omitempty"`
	Comments                bool                   `protobuf:"varint,10,opt,name=comments,proto3" json:"comments,omitempty"`
	Tags                    bool                   `protobuf:"varint,11,opt,name=tags,proto3" json:"tags,omitempty"`
	IgnoreRule              []string               `protobuf:"bytes,12,rep,name=ignore_rule,json=ignoreRule,proto3" json:"ignore_rule,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ParseCodebaseRequest) Reset() {
	*x = ParseCodebaseRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseCodebaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseCodebaseRequest) ProtoMessage() {}

func (x *ParseCodebaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseCodebaseRequest.ProtoReflect.Descriptor instead.
func (*ParseCodebaseRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{0}
}

func (x *ParseCodebaseRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParseCodebaseRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *ParseCodebaseRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ParseCodebaseRequest) GetPlainStructs() bool {
	if x != nil {
		return x.PlainStructs
	}
	return false
}

func (x *ParseCodebaseRequest) GetFieldsPlainStructs() bool {
	if x != nil {
		return x.FieldsPlainStructs
	}
	return false
}

func (x *ParseCodebaseRequest) GetStructsWithMethod() bool {
	if x != nil {
		return x.StructsWithMethod
	}
	return false
}

func (x *ParseCodebaseRequest) GetFieldsStructsWithMethod() bool {
	if x != nil {
		return x.FieldsStructsWithMethod
	}
	return false
}

func (x *ParseCodebaseRequest) GetMethods() bool {
	if x != nil {
		return x.Methods
	}
	return false
}

func (x *ParseCodebaseRequest) GetFunctions() bool {
	if x != nil {
		return x.Functions
	}
	return false
}

func (x *ParseCodebaseRequest) GetComments() bool {
	if x != nil {
		return x.Comments
	}
	return false
}

func (x *ParseCodebaseRequest) GetTags() bool {
	if x != nil {
		return x.Tags
	}
	return false
}

func (x *ParseCodebaseRequest) GetIgnoreRule() []string {
	if x != nil {
		return x.IgnoreRule
	}
	return nil
}

// Response message for ParseCodebase
type ParseCodebaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParsedInfo    string                 `protobuf:"bytes,1,opt,name=parsed_info,json=parsedInfo,proto3" json:"parsed_info,omitempty"` // This can be adjusted based on the actual structure of parsed data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseCodebaseResponse) Reset() {
	*x = ParseCodebaseResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseCodebaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseCodebaseResponse) ProtoMessage() {}

func (x *ParseCodebaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseCodebaseResponse.ProtoReflect.Descriptor instead.
func (*ParseCodebaseResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{1}
}

func (x *ParseCodebaseResponse) GetParsedInfo() string {
	if x != nil {
		return x.ParsedInfo
	}
	return ""
}

type QuestionAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Question      string                 `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Answer        string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionAnswer) Reset() {
	*x = QuestionAnswer{}
	mi := &file_api_codesurgeon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnswer) ProtoMessage() {}

func (x *QuestionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnswer.ProtoReflect.Descriptor instead.
func (*QuestionAnswer) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{2}
}

func (x *QuestionAnswer) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type GetOpenAPIRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOpenAPIRequest) Reset() {
	*x = GetOpenAPIRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOpenAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenAPIRequest) ProtoMessage() {}

func (x *GetOpenAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenAPIRequest.ProtoReflect.Descriptor instead.
func (*GetOpenAPIRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{3}
}

type GetOpenAPIResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Openapi       string                 `protobuf:"bytes,1,opt,name=openapi,proto3" json:"openapi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOpenAPIResponse) Reset() {
	*x = GetOpenAPIResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOpenAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenAPIResponse) ProtoMessage() {}

func (x *GetOpenAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenAPIResponse.ProtoReflect.Descriptor instead.
func (*GetOpenAPIResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{4}
}

func (x *GetOpenAPIResponse) GetOpenapi() string {
	if x != nil {
		return x.Openapi
	}
	return ""
}

type SearchSimilarFunctionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Objective     string                 `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchSimilarFunctionsRequest) Reset() {
	*x = SearchSimilarFunctionsRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSimilarFunctionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSimilarFunctionsRequest) ProtoMessage() {}

func (x *SearchSimilarFunctionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSimilarFunctionsRequest.ProtoReflect.Descriptor instead.
func (*SearchSimilarFunctionsRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{5}
}

func (x *SearchSimilarFunctionsRequest) GetObjective() string {
	if x != nil {
		return x.Objective
	}
	return ""
}

type SearchSimilarFunctionsResponse struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Functions     []*SearchSimilarFunctionsResponse_Function `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchSimilarFunctionsResponse) Reset() {
	*x = SearchSimilarFunctionsResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSimilarFunctionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSimilarFunctionsResponse) ProtoMessage() {}

func (x *SearchSimilarFunctionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSimilarFunctionsResponse.ProtoReflect.Descriptor instead.
func (*SearchSimilarFunctionsResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{6}
}

func (x *SearchSimilarFunctionsResponse) GetFunctions() []*SearchSimilarFunctionsResponse_Function {
	if x != nil {
		return x.Functions
	}
	return nil
}

type GetNeo4JSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNeo4JSchemaRequest) Reset() {
	*x = GetNeo4JSchemaRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNeo4JSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNeo4JSchemaRequest) ProtoMessage() {}

func (x *GetNeo4JSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNeo4JSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetNeo4JSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{7}
}

type GetNeo4JSchemaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        *Schema                `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNeo4JSchemaResponse) Reset() {
	*x = GetNeo4JSchemaResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNeo4JSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNeo4JSchemaResponse) ProtoMessage() {}

func (x *GetNeo4JSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNeo4JSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetNeo4JSchemaResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{8}
}

func (x *GetNeo4JSchemaResponse) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// Schema for Neo4j database
type Schema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Labels        []*LabelSchema         `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Relationships []*RelationshipSchema  `protobuf:"bytes,2,rep,name=relationships,proto3" json:"relationships,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_api_codesurgeon_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{9}
}

func (x *Schema) GetLabels() []*LabelSchema {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Schema) GetRelationships() []*RelationshipSchema {
	if x != nil {
		return x.Relationships
	}
	return nil
}

// LabelSchema represents a node label in Neo4j
type LabelSchema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Properties    []*PropertySchema      `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelSchema) Reset() {
	*x = LabelSchema{}
	mi := &file_api_codesurgeon_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSchema) ProtoMessage() {}

func (x *LabelSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSchema.ProtoReflect.Descriptor instead.
func (*LabelSchema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{10}
}

func (x *LabelSchema) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LabelSchema) GetProperties() []*PropertySchema {
	if x != nil {
		return x.Properties
	}
	return nil
}

// PropertySchema represents a property of a node in Neo4j
type PropertySchema struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Property            string                 `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Type                string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsIndexed           bool                   `protobuf:"varint,3,opt,name=isIndexed,proto3" json:"isIndexed,omitempty"`
	UniqueConstraint    bool                   `protobuf:"varint,4,opt,name=uniqueConstraint,proto3" json:"uniqueConstraint,omitempty"`
	ExistenceConstraint bool                   `protobuf:"varint,5,opt,name=existenceConstraint,proto3" json:"existenceConstraint,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PropertySchema) Reset() {
	*x = PropertySchema{}
	mi := &file_api_codesurgeon_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertySchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertySchema) ProtoMessage() {}

func (x *PropertySchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertySchema.ProtoReflect.Descriptor instead.
func (*PropertySchema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{11}
}

func (x *PropertySchema) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertySchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PropertySchema) GetIsIndexed() bool {
	if x != nil {
		return x.IsIndexed
	}
	return false
}

func (x *PropertySchema) GetUniqueConstraint() bool {
	if x != nil {
		return x.UniqueConstraint
	}
	return false
}

func (x *PropertySchema) GetExistenceConstraint() bool {
	if x != nil {
		return x.ExistenceConstraint
	}
	return false
}

// RelationshipSchema represents a relationship in Neo4j
type RelationshipSchema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Relationship  string                 `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
	FromLabel     string                 `protobuf:"bytes,2,opt,name=fromLabel,proto3" json:"fromLabel,omitempty"`
	ToLabel       string                 `protobuf:"bytes,3,opt,name=toLabel,proto3" json:"toLabel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationshipSchema) Reset() {
	*x = RelationshipSchema{}
	mi := &file_api_codesurgeon_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationshipSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipSchema) ProtoMessage() {}

func (x *RelationshipSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationshipSchema.ProtoReflect.Descriptor instead.
func (*RelationshipSchema) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{12}
}

func (x *RelationshipSchema) GetRelationship() string {
	if x != nil {
		return x.Relationship
	}
	return ""
}

func (x *RelationshipSchema) GetFromLabel() string {
	if x != nil {
		return x.FromLabel
	}
	return ""
}

func (x *RelationshipSchema) GetToLabel() string {
	if x != nil {
		return x.ToLabel
	}
	return ""
}

// Request to think through a problem
type ThinkThroughProblemRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Goal             string                 `protobuf:"bytes,1,opt,name=goal,proto3" json:"goal,omitempty"`
	Context          string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	ProblemStatement string                 `protobuf:"bytes,3,opt,name=problem_statement,json=problemStatement,proto3" json:"problem_statement,omitempty"`
	Questions        []string               `protobuf:"bytes,4,rep,name=questions,proto3" json:"questions,omitempty"`
	QuestionsString  string                 `protobuf:"bytes,5,opt,name=questions_string,json=questionsString,proto3" json:"questions_string,omitempty"` // multiple questions in one block, to be parsed with llm
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ThinkThroughProblemRequest) Reset() {
	*x = ThinkThroughProblemRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThinkThroughProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkThroughProblemRequest) ProtoMessage() {}

func (x *ThinkThroughProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkThroughProblemRequest.ProtoReflect.Descriptor instead.
func (*ThinkThroughProblemRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{13}
}

func (x *ThinkThroughProblemRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *ThinkThroughProblemRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ThinkThroughProblemRequest) GetProblemStatement() string {
	if x != nil {
		return x.ProblemStatement
	}
	return ""
}

func (x *ThinkThroughProblemRequest) GetQuestions() []string {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ThinkThroughProblemRequest) GetQuestionsString() string {
	if x != nil {
		return x.QuestionsString
	}
	return ""
}

// Response from thinking through a problem
type ThinkThroughProblemResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Answers          []*QuestionAnswer      `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	Observations     string                 `protobuf:"bytes,2,opt,name=observations,proto3" json:"observations,omitempty"`
	SimilarQuestions []*QuestionAnswer      `protobuf:"bytes,3,rep,name=similar_questions,json=similarQuestions,proto3" json:"similar_questions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ThinkThroughProblemResponse) Reset() {
	*x = ThinkThroughProblemResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThinkThroughProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkThroughProblemResponse) ProtoMessage() {}

func (x *ThinkThroughProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkThroughProblemResponse.ProtoReflect.Descriptor instead.
func (*ThinkThroughProblemResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{14}
}

func (x *ThinkThroughProblemResponse) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *ThinkThroughProblemResponse) GetObservations() string {
	if x != nil {
		return x.Observations
	}
	return ""
}

func (x *ThinkThroughProblemResponse) GetSimilarQuestions() []*QuestionAnswer {
	if x != nil {
		return x.SimilarQuestions
	}
	return nil
}

// Request to add knowledge to the system
type AddKnowledgeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	QuestionAnswer []*QuestionAnswer      `protobuf:"bytes,1,rep,name=question_answer,json=questionAnswer,proto3" json:"question_answer,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddKnowledgeRequest) Reset() {
	*x = AddKnowledgeRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKnowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKnowledgeRequest) ProtoMessage() {}

func (x *AddKnowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKnowledgeRequest.ProtoReflect.Descriptor instead.
func (*AddKnowledgeRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{15}
}

func (x *AddKnowledgeRequest) GetQuestionAnswer() []*QuestionAnswer {
	if x != nil {
		return x.QuestionAnswer
	}
	return nil
}

// Response after adding knowledge
type AddKnowledgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddKnowledgeResponse) Reset() {
	*x = AddKnowledgeResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKnowledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKnowledgeResponse) ProtoMessage() {}

func (x *AddKnowledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKnowledgeResponse.ProtoReflect.Descriptor instead.
func (*AddKnowledgeResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{16}
}

// Request to execute a Neo4j query
type ExecuteNeo4JQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteNeo4JQueryRequest) Reset() {
	*x = ExecuteNeo4JQueryRequest{}
	mi := &file_api_codesurgeon_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteNeo4JQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNeo4JQueryRequest) ProtoMessage() {}

func (x *ExecuteNeo4JQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNeo4JQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteNeo4JQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{17}
}

func (x *ExecuteNeo4JQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Response from executing a Neo4j query
type ExecuteNeo4JQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteNeo4JQueryResponse) Reset() {
	*x = ExecuteNeo4JQueryResponse{}
	mi := &file_api_codesurgeon_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteNeo4JQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNeo4JQueryResponse) ProtoMessage() {}

func (x *ExecuteNeo4JQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNeo4JQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteNeo4JQueryResponse) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{18}
}

func (x *ExecuteNeo4JQueryResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type SearchSimilarFunctionsResponse_Function struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchSimilarFunctionsResponse_Function) Reset() {
	*x = SearchSimilarFunctionsResponse_Function{}
	mi := &file_api_codesurgeon_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSimilarFunctionsResponse_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSimilarFunctionsResponse_Function) ProtoMessage() {}

func (x *SearchSimilarFunctionsResponse_Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_codesurgeon_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSimilarFunctionsResponse_Function.ProtoReflect.Descriptor instead.
func (*SearchSimilarFunctionsResponse_Function) Descriptor() ([]byte, []int) {
	return file_api_codesurgeon_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SearchSimilarFunctionsResponse_Function) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

var File_api_codesurgeon_proto protoreflect.FileDescriptor

const file_api_codesurgeon_proto_rawDesc = "" +
	"\n" +
	"\x15api/codesurgeon.proto\x12\vcodesurgeon\"\xad\x03\n" +
	"\x14ParseCodebaseRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1c\n" +
	"\trecursive\x18\x02 \x01(\bR\trecursive\x12\x16\n" +
	"\x06format\x18\x03 \x01(\tR\x06format\x12#\n" +
	"\rplain_structs\x18\x04 \x01(\bR\fplainStructs\x120\n" +
	"\x14fields_plain_structs\x18\x05 \x01(\bR\x12fieldsPlainStructs\x12.\n" +
	"\x13structs_with_method\x18\x06 \x01(\bR\x11structsWithMethod\x12;\n" +
	"\x1afields_structs_with_method\x18\a \x01(\bR\x17fieldsStructsWithMethod\x12\x18\n" +
	"\amethods\x18\b \x01(\bR\amethods\x12\x1c\n" +
	"\tfunctions\x18\t \x01(\bR\tfunctions\x12\x1a\n" +
	"\bcomments\x18\n" +
	" \x01(\bR\bcomments\x12\x12\n" +
	"\x04tags\x18\v \x01(\bR\x04tags\x12\x1f\n" +
	"\vignore_rule\x18\f \x03(\tR\n" +
	"ignoreRule\"8\n" +
	"\x15ParseCodebaseResponse\x12\x1f\n" +
	"\vparsed_info\x18\x01 \x01(\tR\n" +
	"parsedInfo\"D\n" +
	"\x0eQuestionAnswer\x12\x1a\n" +
	"\bquestion\x18\x01 \x01(\tR\bquestion\x12\x16\n" +
	"\x06answer\x18\x02 \x01(\tR\x06answer\"\x13\n" +
	"\x11GetOpenAPIRequest\".\n" +
	"\x12GetOpenAPIResponse\x12\x18\n" +
	"\aopenapi\x18\x01 \x01(\tR\aopenapi\"=\n" +
	"\x1dSearchSimilarFunctionsRequest\x12\x1c\n" +
	"\tobjective\x18\x01 \x01(\tR\tobjective\"\x94\x01\n" +
	"\x1eSearchSimilarFunctionsResponse\x12R\n" +
	"\tfunctions\x18\x01 \x03(\v24.codesurgeon.SearchSimilarFunctionsResponse.FunctionR\tfunctions\x1a\x1e\n" +
	"\bFunction\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\"\x17\n" +
	"\x15GetNeo4jSchemaRequest\"E\n" +
	"\x16GetNeo4jSchemaResponse\x12+\n" +
	"\x06schema\x18\x01 \x01(\v2\x13.codesurgeon.SchemaR\x06schema\"\x81\x01\n" +
	"\x06Schema\x120\n" +
	"\x06labels\x18\x01 \x03(\v2\x18.codesurgeon.LabelSchemaR\x06labels\x12E\n" +
	"\rrelationships\x18\x02 \x03(\v2\x1f.codesurgeon.RelationshipSchemaR\rrelationships\"`\n" +
	"\vLabelSchema\x12\x14\n" +
	"\x05label\x18\x01 \x01(\tR\x05label\x12;\n" +
	"\n" +
	"properties\x18\x02 \x03(\v2\x1b.codesurgeon.PropertySchemaR\n" +
	"properties\"\xbc\x01\n" +
	"\x0ePropertySchema\x12\x1a\n" +
	"\bproperty\x18\x01 \x01(\tR\bproperty\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1c\n" +
	"\tisIndexed\x18\x03 \x01(\bR\tisIndexed\x12*\n" +
	"\x10uniqueConstraint\x18\x04 \x01(\bR\x10uniqueConstraint\x120\n" +
	"\x13existenceConstraint\x18\x05 \x01(\bR\x13existenceConstraint\"p\n" +
	"\x12RelationshipSchema\x12\"\n" +
	"\frelationship\x18\x01 \x01(\tR\frelationship\x12\x1c\n" +
	"\tfromLabel\x18\x02 \x01(\tR\tfromLabel\x12\x18\n" +
	"\atoLabel\x18\x03 \x01(\tR\atoLabel\"\xc0\x01\n" +
	"\x1aThinkThroughProblemRequest\x12\x12\n" +
	"\x04goal\x18\x01 \x01(\tR\x04goal\x12\x18\n" +
	"\acontext\x18\x02 \x01(\tR\acontext\x12+\n" +
	"\x11problem_statement\x18\x03 \x01(\tR\x10problemStatement\x12\x1c\n" +
	"\tquestions\x18\x04 \x03(\tR\tquestions\x12)\n" +
	"\x10questions_string\x18\x05 \x01(\tR\x0fquestionsString\"\xc2\x01\n" +
	"\x1bThinkThroughProblemResponse\x125\n" +
	"\aanswers\x18\x01 \x03(\v2\x1b.codesurgeon.QuestionAnswerR\aanswers\x12\"\n" +
	"\fobservations\x18\x02 \x01(\tR\fobservations\x12H\n" +
	"\x11similar_questions\x18\x03 \x03(\v2\x1b.codesurgeon.QuestionAnswerR\x10similarQuestions\"[\n" +
	"\x13AddKnowledgeRequest\x12D\n" +
	"\x0fquestion_answer\x18\x01 \x03(\v2\x1b.codesurgeon.QuestionAnswerR\x0equestionAnswer\"\x16\n" +
	"\x14AddKnowledgeResponse\"0\n" +
	"\x18ExecuteNeo4jQueryRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\"3\n" +
	"\x19ExecuteNeo4jQueryResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\tR\x06result2\xa4\x05\n" +
	"\n" +
	"GptService\x12M\n" +
	"\n" +
	"GetOpenAPI\x12\x1e.codesurgeon.GetOpenAPIRequest\x1a\x1f.codesurgeon.GetOpenAPIResponse\x12q\n" +
	"\x16SearchSimilarFunctions\x12*.codesurgeon.SearchSimilarFunctionsRequest\x1a+.codesurgeon.SearchSimilarFunctionsResponse\x12Y\n" +
	"\x0eGetNeo4jSchema\x12\".codesurgeon.GetNeo4jSchemaRequest\x1a#.codesurgeon.GetNeo4jSchemaResponse\x12b\n" +
	"\x11ExecuteNeo4jQuery\x12%.codesurgeon.ExecuteNeo4jQueryRequest\x1a&.codesurgeon.ExecuteNeo4jQueryResponse\x12h\n" +
	"\x13ThinkThroughProblem\x12'.codesurgeon.ThinkThroughProblemRequest\x1a(.codesurgeon.ThinkThroughProblemResponse\x12S\n" +
	"\fAddKnowledge\x12 .codesurgeon.AddKnowledgeRequest\x1a!.codesurgeon.AddKnowledgeResponse\x12V\n" +
	"\rParseCodebase\x12!.codesurgeon.ParseCodebaseRequest\x1a\".codesurgeon.ParseCodebaseResponseB\x95\x01\n" +
	"\x0fcom.codesurgeonB\x10CodesurgeonProtoP\x01Z$github.com/wricardo/code-surgeon/api\xa2\x02\x03CXX\xaa\x02\vCodesurgeon\xca\x02\vCodesurgeon\xe2\x02\x17Codesurgeon\\GPBMetadata\xea\x02\vCodesurgeonb\x06proto3"

var (
	file_api_codesurgeon_proto_rawDescOnce sync.Once
	file_api_codesurgeon_proto_rawDescData []byte
)

func file_api_codesurgeon_proto_rawDescGZIP() []byte {
	file_api_codesurgeon_proto_rawDescOnce.Do(func() {
		file_api_codesurgeon_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_codesurgeon_proto_rawDesc), len(file_api_codesurgeon_proto_rawDesc)))
	})
	return file_api_codesurgeon_proto_rawDescData
}

var file_api_codesurgeon_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_codesurgeon_proto_goTypes = []any{
	(*ParseCodebaseRequest)(nil),                    // 0: codesurgeon.ParseCodebaseRequest
	(*ParseCodebaseResponse)(nil),                   // 1: codesurgeon.ParseCodebaseResponse
	(*QuestionAnswer)(nil),                          // 2: codesurgeon.QuestionAnswer
	(*GetOpenAPIRequest)(nil),                       // 3: codesurgeon.GetOpenAPIRequest
	(*GetOpenAPIResponse)(nil),                      // 4: codesurgeon.GetOpenAPIResponse
	(*SearchSimilarFunctionsRequest)(nil),           // 5: codesurgeon.SearchSimilarFunctionsRequest
	(*SearchSimilarFunctionsResponse)(nil),          // 6: codesurgeon.SearchSimilarFunctionsResponse
	(*GetNeo4JSchemaRequest)(nil),                   // 7: codesurgeon.GetNeo4jSchemaRequest
	(*GetNeo4JSchemaResponse)(nil),                  // 8: codesurgeon.GetNeo4jSchemaResponse
	(*Schema)(nil),                                  // 9: codesurgeon.Schema
	(*LabelSchema)(nil),                             // 10: codesurgeon.LabelSchema
	(*PropertySchema)(nil),                          // 11: codesurgeon.PropertySchema
	(*RelationshipSchema)(nil),                      // 12: codesurgeon.RelationshipSchema
	(*ThinkThroughProblemRequest)(nil),              // 13: codesurgeon.ThinkThroughProblemRequest
	(*ThinkThroughProblemResponse)(nil),             // 14: codesurgeon.ThinkThroughProblemResponse
	(*AddKnowledgeRequest)(nil),                     // 15: codesurgeon.AddKnowledgeRequest
	(*AddKnowledgeResponse)(nil),                    // 16: codesurgeon.AddKnowledgeResponse
	(*ExecuteNeo4JQueryRequest)(nil),                // 17: codesurgeon.ExecuteNeo4jQueryRequest
	(*ExecuteNeo4JQueryResponse)(nil),               // 18: codesurgeon.ExecuteNeo4jQueryResponse
	(*SearchSimilarFunctionsResponse_Function)(nil), // 19: codesurgeon.SearchSimilarFunctionsResponse.Function
}
var file_api_codesurgeon_proto_depIdxs = []int32{
	19, // 0: codesurgeon.SearchSimilarFunctionsResponse.functions:type_name -> codesurgeon.SearchSimilarFunctionsResponse.Function
	9,  // 1: codesurgeon.GetNeo4jSchemaResponse.schema:type_name -> codesurgeon.Schema
	10, // 2: codesurgeon.Schema.labels:type_name -> codesurgeon.LabelSchema
	12, // 3: codesurgeon.Schema.relationships:type_name -> codesurgeon.RelationshipSchema
	11, // 4: codesurgeon.LabelSchema.properties:type_name -> codesurgeon.PropertySchema
	2,  // 5: codesurgeon.ThinkThroughProblemResponse.answers:type_name -> codesurgeon.QuestionAnswer
	2,  // 6: codesurgeon.ThinkThroughProblemResponse.similar_questions:type_name -> codesurgeon.QuestionAnswer
	2,  // 7: codesurgeon.AddKnowledgeRequest.question_answer:type_name -> codesurgeon.QuestionAnswer
	3,  // 8: codesurgeon.GptService.GetOpenAPI:input_type -> codesurgeon.GetOpenAPIRequest
	5,  // 9: codesurgeon.GptService.SearchSimilarFunctions:input_type -> codesurgeon.SearchSimilarFunctionsRequest
	7,  // 10: codesurgeon.GptService.GetNeo4jSchema:input_type -> codesurgeon.GetNeo4jSchemaRequest
	17, // 11: codesurgeon.GptService.ExecuteNeo4jQuery:input_type -> codesurgeon.ExecuteNeo4jQueryRequest
	13, // 12: codesurgeon.GptService.ThinkThroughProblem:input_type -> codesurgeon.ThinkThroughProblemRequest
	15, // 13: codesurgeon.GptService.AddKnowledge:input_type -> codesurgeon.AddKnowledgeRequest
	0,  // 14: codesurgeon.GptService.ParseCodebase:input_type -> codesurgeon.ParseCodebaseRequest
	4,  // 15: codesurgeon.GptService.GetOpenAPI:output_type -> codesurgeon.GetOpenAPIResponse
	6,  // 16: codesurgeon.GptService.SearchSimilarFunctions:output_type -> codesurgeon.SearchSimilarFunctionsResponse
	8,  // 17: codesurgeon.GptService.GetNeo4jSchema:output_type -> codesurgeon.GetNeo4jSchemaResponse
	18, // 18: codesurgeon.GptService.ExecuteNeo4jQuery:output_type -> codesurgeon.ExecuteNeo4jQueryResponse
	14, // 19: codesurgeon.GptService.ThinkThroughProblem:output_type -> codesurgeon.ThinkThroughProblemResponse
	16, // 20: codesurgeon.GptService.AddKnowledge:output_type -> codesurgeon.AddKnowledgeResponse
	1,  // 21: codesurgeon.GptService.ParseCodebase:output_type -> codesurgeon.ParseCodebaseResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_codesurgeon_proto_init() }
func file_api_codesurgeon_proto_init() {
	if File_api_codesurgeon_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_codesurgeon_proto_rawDesc), len(file_api_codesurgeon_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_codesurgeon_proto_goTypes,
		DependencyIndexes: file_api_codesurgeon_proto_depIdxs,
		MessageInfos:      file_api_codesurgeon_proto_msgTypes,
	}.Build()
	File_api_codesurgeon_proto = out.File
	file_api_codesurgeon_proto_goTypes = nil
	file_api_codesurgeon_proto_depIdxs = nil
}
